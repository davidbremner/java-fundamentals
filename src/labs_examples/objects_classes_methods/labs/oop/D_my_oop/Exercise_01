
For this exercise please model and build your own Object-Oriented Application. You can build whatever you want.
Demonstrate your understanding of Encapsulation, Inheritance and Polymorphism - as well as all the other skills you
now have. Be creative. Have fun. Challenge yourself. What would you like to build? A restaurant service? A rock climbing
application? An interactive model of the universe? An application to help biologists? A financial trading application?
A payroll and HR application? Is there something you could use in your day to day life that you could build an
application around?

Imagine it, design it, build it, test it. Have some fun. Reach out anytime you're stuck.


1. Controller
2. [DONE] CustomerProfile (previous and current orders, payment history, saved card information, personal information)
3. CreditCheck (based on how much in CustomerBankAccount & if any previous orders had any late payments(payment history))
4. Product (subclasses of each product - PayNow, PayLater, PayIn3)
5. [DONE] UserPersonalBankAccount (personal information, bank information, bank balance)
6. Checkout (maybe no need for subclass for product, can take in Product class?)
7. Merchant (subclasses of each merchant)
8. Servicing system (holds all/most information as above, passes through SS and acts as source of truth)

FLOW:
- Customer attempts placing an order
- Credit check
- IF successful, signal sent to customers account to place an auth on their card
    - ELSE rejected at checkout (failed credit check, end of program)
- IF successful, order is placed with merchant
    - ELSE rejected at checkout (not enough funds, end of program)
- Order created in servicing system
- Merchant captures the order, activating it, therefore creating debt with customer
- Depending on product chosen at checkout, payment plan created for customer
- Customer pays debt according to plan
- Once fully paid, order completed